



directory 구조

/ 

/bin 명령어있는곳  
/sbin system 명령어있는곳
/root root 홈
/etc  system 설정파일 저장소
/boot 
/mnt  
/lib 언어저장소
/proc 프로세스 정보 저장소 
/tmp 
/usr  응용프로그렘 저장소 program file win
/var  로그 기록 
/home


dd if=/dev/zero of=/swapfile bs=1024 count=1024000  1g 채운다
 







system configuration       => /etc/profile  user logname mail hostname 
                                     /etc/bashrc   umask 

user configuration          =>.bash_profile  shell PATH  configuration
                                 =>.bashrc         alias funtion configuration

chmod +x "Shell name"    => file empower,. authorize 


create "Shell name" .sh     =>create shell

./"Shell name"                => Shell name  run, execute  
sh "Shell name"                   ( if PATH not cofitguration =>local variable)

export PATH = $PATH:"(shell location directory)" =>PATH configuration ( PATH execute front line first) 
                                                                  after execute #"shellname"

PATH= echo $PATH | sed -e 's/:\/home\/isec\/isec_bin\/$//' <<< $PATH)
                                        

sort -t: -k 3 -n /etc/passwd  =>  /etc/passwd  UID sort



cat /etc/shadow | grep isec   

isec:$6 $9dkfj $ djflkjsdflkjsdflkj: n(18488)  : b(7) : c(90) :d(x) :e(z) :

 $6 => 암호 알고리즘
 $9 => 비번의 salt 값 
 $lsdfkljdlkjf => 암호 된 비번
 a => 암호 변경 일수 1970 기준   
 n => 암호 변경 유지 최소일수             passwd -n 7 isec 
 c => 암호 지속시간 최대일수              passwd -x 90 isec
 d => 암호 지속시간 만료후 계정이 잠기는 기간  chage -I x isec
 e => 사용자 계정 만기일                        chage -E z isec

passwd -S  isec =>암호상태 알려줌 
usermod -L  isec => 비번잠금
usermod -U isec => 비번 풀음

pwunconv                                shadow file use O or X
            ls -l /etc/shadow
            tail -1 /etc/passwd
pwconv
            tail -1 /etc/passwd


isec : x : 1000 : 1000 : isec : /home/isec: /bin/bash
            -u    -g      -c      -d            -s

 tail -1 /etc/passwd
             useradd -u 1100 test1
             useradd -g isec test2
             useradd -G test1 test3
 tail -3 /etc/group
            useradd -c goodbye test4
 tail -1 /etc/passwd

사용자 id 는 ihd , 홈 디렉토리는 /home/ihd 기본그룹은 ihd 보조그룹은 isec 이다 
useradd -G ihd
   

useradd admin -u 0 -g 0
useradd -o admin -u 0 -g 0  ==> UID same GID same  






usermod -u 1010 -c good -s /bin/tcsh test4
cat /etc/passwd | grep test4


useradd ktuser
ls -l /home
usermod -l skuser -d /home/skuser -m ktuser

userdel test4
tail -5 /etc/passwd
tail -5 /etc/shadow
tail -5 /etc/group
tail -5 /etc/gshadow
ls-l /home
ls-l /var/spool/mail

userdel -r test3          =< clean 
tail -5 /etc/passwd
tail -5 /etc/shadow
tail -5 /etc/group
tail -5 /etc/gshadow
ls-l /home
ls-l /var/spool/mail

 groupadd group1
 groupmod -g 2000 group1
 groupdel group1

gpasswd -a isec root
cat /etc/group | grep root
gpasswd -M isec,test1,test2  root
gpasswd -d isec root
vi /etc/group

vi /etc/default/useradd   =>> 사용자 계정설정 기준 

useradd -D   config change

GROUP  useradd -D -g      => group 
HOME useradd -D -b      => dir
INACTIVE  useradd -D -f [0or -1]  =>암호만료일 사용자 사용 
EXPIRE   useradd -D -e  => passwd 만료일 지정
SHELL    useradd -D -s  => shell 선택 
SKEL
CREATE_MAIL_SPOOL





permission        r =4 , w=2, x=1
ls -l file
- rwx  rwx    rwx . 1         root     root 0       x월 x일  text
  user group other  링크수  파일소유자 파일소유그룹

chmod 777 
         a+rwx,u+rwx,g+rwx 

chmod a=x  a.txt   권한준건빼곤 없다

useradd user1
passwd user1

chown user1.user1 a.txt     소유자 그룹소유자 바꿈 
         user1:user1 

chgrp user a.txt  = chown  .user  a.txt
                                   :user a.txt 
dir 777 file 666 

umask permission configuration
umask value 
dir  777 - value
file 666 -value

umask -S   

chmod 777 a
chmod 4705 a
chmod u-s a

chmod g+s a
chmod g+x a

yum -y install gcc   c 언어 컴파일 



file    shell name    file 정보 보여줘
strings shell name   명령어 보여줘

ssh "id"@"ip"         ip 접속 
cp -p "filename" location  -p 퍼미션 까지복사

chattr               file attribute 부여
lsattr                                   확인
       +i  "filename" read only
       -i                       제거
        +a  "filename"  read append only
        -a                               제거

 acl   Access Controll  List       
 
 setfacl -m    u:       :rwx       filename
         설정   유저이름  권한부여   파일     
         -x                          삭제
         -m    m
               umsk 설정                 퍼미션 계산 마스크 값과 유져값 합집합 사용
 
 systemctl status crond.service 
 systemctl is-active crond        상태확인

 vi /etc/crontab     =>  스케줄 설정
 01 3 15 * * root run-parts /etc/corn.monthly
 분 시 일 월 요일 

 vi /etc/cron.monthly/backup.sh
mkdir  /backup
systemctl restart crond.service
chmod 755 backup.sh
date 011503002030
rdate -s time.bora.net
ls /etc | grep cron*
cron.deny                     // dney 만 있다면 user 는 cron 사용불가능
cron.allow                   // 이에 존제하는 user 만 cron 사용가능
root echo isec > /etc/cron.allow
su isec 
crontab 
crontab -l                      permission 줘야 가능


sector => cluster =>track =>cylinder


HDD ----> RAM -----> Cache----->CPU
    page      block        word  



touch data1
stat data1  inode namuber   Modify  Access Change 확인  


/dev/dsx     HardDisk (x= a,b,c,d,...)
/dev/dsxn    parition (n=1,2,3,4,...) 
fdisk        partition 
mkfs         make file system = format

        
fstab=  file system table

linux filesystem EXT4,XFS

저널링  복구하기위해서 쓰는 system 오늘 고장나면
어제만 사용한 파일을 검색한다



fdisk -l
fdisk /etc/sdb  n   파티션 설정

mkfs -t ext4 /dev/sdb1
mkfs.ext4 /dev/sdb2
mkdir /mp1
mount /dev/sdb1 /mp1            mount point => mp
vi /etc/fstab
mount -a


df -Th         disk free  type human rederable 사용가능한 하드용량보기



fdisk -l                           swap partition
n t 82 
mkswap /dev/sdb1
swapon /dev/sdb1
swapon
blkid /dev/sdb1                        //hardware uuid value check
vi /etc/fstab

uuid= lkdsjflksjdflsdkajf swap swap defaults 0 0
/dev/sdb1   sawp  swap    defaults 0 0 

mount -a
swapon -a

ctrl + l ==>clear     

                                      swap file
mkdir /swap                            
dd if=/dev/zero of=/swap/swap01 bs=1MiB count=4096   1MB *4096 =4G 짜리 데이터가 0 으로채워진 파일을 만들어라
chmod 600 swap01       
mkswap /swap/swap01
swapon /swap/swap01
swapon
vi /etc/fstab


quota

 mkdir /userhome
 mount /dev/sdb1 /userhome
 vi /etc/fstab
 mount -a

 useradd -d /userhome/choi choi
 useradd -d /userhome/hong hong

vi /etc/fstab
/dev/sdb1   /userhome  ext4  defaults,usrjquota=aquota.user,jqfmt=vfsv0  0 0

 mount -o remount /userhome
 quotaoff -avug
 user quotas turned off
 quotacheck -augmn
 rm -fr aquota.*
 quotacheck -augmn
 touch aquota.user aquota.group
 chmod 600 aquota.*
 quotacheck -augmn
 quotaon -avug
 edquota -u choi


vgdisplay


pv => vg =>lv  

fdisk /dev/sdb
t 8e
fdisk /dev/sdc
t 8e
pvcreate /dev/sdb1
pvcreate /dev/sdb2

vgcreate vg /dev/sdb1 /dev/sdc1

lvcreate -L 300MB -n lv1 vg
 lvcreate --size  1G  --name  lv2 vg
  lvcreate --extents 100%FREE --name lv3 vg
  
   mkfs -t ext4 /dev/vg/lv1
    mkfs -t ext4 /dev/vg/lv2
     mkfs -t ext4 /dev/vg/lv3

mkdir /lvm1 /lvm2 /lvm3

mount /dev/vg/lv1 /lvm1
mount /dev/vg/lv2 /lvm2
mount /dev/vg/lv3 /lvm3

vi /etc/fstab
dev/vg/lv1  /lvm1  ext4 defaults 0 0
mount -a

raid

fdisk /dev/sdb                   //fd parition
t fd                  
fdisk /dev/sdc
t fd

mdadm -C(--create) /dev/md9 -l(--level) linear -n 2 /dev/sdb1 /dev/sdc1
                    이름                종류      하드갯수
                                 // raid 설정

mdamd -D(--detail) -S(--scan)      // raid 설정확인
mdamd  -D /etc/md9

mkfs -t ext4 /dev/md9           // format

mkdir /linerraid                   // mount
    
mount /dev/md9 /linerraid
df -Th
vi /etc/fstab
mount -a

mdadm -D -s /dev/md9
ls -l /etc/mdadm.conf
mdadm -D -s /dev/md9 > /etc/mdadm.conf
cat /etc/mdadm.conf


 umount /dev/md9                              //raid 삭제
 mdadm --stop /dev/md9
 mdadm --remove /dev/md9
 mdadm --zero-superblock /dev/sdb1 /dev/sdc1
 rm -rf /dev/mdadm.conf
 vi /etc/fstab
 fdisk /dev/sdb
 d
 fdisk /dev/sdc

   
   
    1  fdisk /dev/sdb                                 //raid0 만들기
    2  fdisk /dev/sdc
    4  mdadm -C /dev/md0 -l 0 -n 2 /dev/sdb1 /dev/sdc1
    5  mdadm -D /dev/md0
    6  mkfs -t ext4 /dev/md0
    7  mkdir /raid0
    8  mount /dev/md0 /raid0
    9  df -Th
   10  vi /etc/fstab
       /dev/md0  /raid0 ext4 defaults 0 0
   11  mount -a
   12  mdadm -D -s /dev/md0 > /etc/mdadm.conf
   13  cat /etc/mdadm.conf


hard link

stat filename  => 파일 상태를 보여줌 mac 링크 inode 보여줌
ln 원본파일 링크파일이름 =>원본복사 원본에 기입해도 복사본에 기입된다 링크로 연결 되있음  

ln -s 원본파일 링크파일이름  => 링크 연결되있으나 inode 가아닌 파일에 링크가 걸려있음 

ls -il   //i node showing
sighup 2 ctrl+c  프로세스 종료 
sighup 9 kill   프로세스 강제종료 기록도못하고 강제종료시킴
sighup 20  ctrl+z 작업을 대기 시킨다 suspend 

kill 명령어 
pkill [sig number] PID 

jobs -l   background 돌아가는 process 확인한다
nohub 사용자가 로그아웃 하거나 터미널을 닫아도 백그라운드로 작업을 할수 있게 도와준다

top 프로세스 모니터링 

ps 동작중인 프로세스 상세보기
ps -aux 동작된 프로세스 보기
ps -ef|grep ssh  동작중인 프로세스 보기 
lsof -u isec   실행중인 프로세스가 참조하는 파일 정보를 보여주는 도구 
vmstat 메모리 스왑 등 자원 모니터링
vmstat -d 디스크 사용량 출력


rpm -Uvh 파일이름   => 패치 설치 의존성 문제가 생김 
rpm -e  파일이름     => 패치 삭제    
yum -y install 파일이름 => 온라인으로 패치를 받는 다 -y 는 all yse
rpm 설치시 cdrom 마운트 확인후 설치
rpm -qa|grep 패키지 이름  => 설치 패키지 확인 
vi /etc/yum.conf  =>yum 설정 파일 


gzip -r file   > file.gz   gunzip file.gz > file       ==>-r 하위 까지복사
bzip2 file  > file.bz2    bunzip2 file.bz2 > file

tar cvfz 생성이름.tar.gz 파일명 파일명2 파일명 3  => gzip 으로 모아서 압축
tar cvfj 생성이름.tar.bz2 파일명 파일명2 파일명 3  => bzip2 으로 모아서 압축
tar cvfJ 생성이름.tar.xz 파일명 파일명2 파일명 3  => xz 으로 모아서 압축


tar xvfz 파일명 -C 위치  => 경로 지정 gzip 파일로 풀경우
tar xvfj 파일명 -C 위치  => 경로 지정 bzip2 파일로 풀경우
tar xvfJ 파일명 -C 위치  => 경로 지정 xz 파일로 풀경우





 ./configure --enable-optimizations  압축을 푼후 해당 폴더에 가서 make file 만들기 컴파일함
make altinstall  컴파일과 설치가 한번에 함
which python3.8  파일위치 찼아
 vi /root/.bashrc  실행 명령어 변경해준다
source /root/.bashrc  데몬 제가동
ls -l /bin/python  링크파일확인
rm -rf /bin/python   링크제거
 ln -s /usr/local/bin/python3.8 /bin/python   링크연결 
 vi /usr/bin/yum
 vi /usr/libexec/urlgrabber-ext-down  

  ls |cpio -ocv >backup.cpio
 cpio -icv < ../backup.cpio


 mkdir /backup
 dd if=/dev/zero of=/home/isec/full bs=1M count=1 //기본파일만듬
 tar cfpz /backup/isec_full.tgz -g /backup/isec_full_backup /home/isec   
        //tgz =tar.gzip 단축  -g 중문백업해라  

 ls -l /backup
 dd if=/dev/zero of=/home/isec/first bs=1M count=1  데이터가싸임 (만든거임)
 tar cfpz /backup/isec_1.tgz -g /backup/isec_inc1_backup /home/isec
                   // 다시압축

tar xfz /backup/isec_2.tgz -g /backup/isec_inc2_backup -C /  풀기



[root@localhost home]# tar cvfz - /home/isec | split -b 10m - isec.tar.gz




 

1  vi /etc/resolv.conf
    2  ethtool ens33
    3  ethtool -s ens33 speed 10 duplex half autoneg off
    4  ethtool ens33|more
    5  ethtool -s ens33 speed 1000 duplex full autoneg on
    6  ethtool ens33|more
    7  history


       1  ll /etc/sysconfig/network
    2  ll /etc/host.conf              =>hosts file on
    3  ll /etc/hosts                             
    4  ll /etc/resolv.conf
    5  ll /etc/sysconfig/network-scripts/ifcfg-ens33






