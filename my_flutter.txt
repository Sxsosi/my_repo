


stateless Widgets
1 스크린상에 존재만 할뿐 아무것도 하지않음
2 어떠한 실시간 데이터도 저장하지않음
3 상태 모양 을 유발시키는 value 값을 가지지 않음

Stataful Widgets
1 사용자 interface 에 따라 모양이 바뀜
2 data 를 받게 되두 모양이 바뀜

Flutter Widget tree
1 widget tree 구조 정리 할수 있음
2 한 widget 은 other widget  include   
3 widget  은  parent widget  자식 위젯
4 Parent widget 은 widget container 


기본적으로 widget 에 입력 값은  named {parameter} 

funtion({var x})  =>named parameter 값 생략 가능하지면  입력시 x 는 얼마라고 지정해줘야한다
         미입력시 => null
         x:  반드시지정해야함 

funtion([var x = y]) =>optionnull parameter 다생략 가능 
             미입력시 =>y



위젯의 key 값을 보고 싶으면 ctrl+space 한다
모든 widget은 MaterialApp child 가 되어야한다 push 는 context 는 

runApp
    MyApp                               // 스크린 레이아웃 을 최초로 빌드  뼈대를 만든다
    =>MaterialApp                     //title  String 사용  앱을 총칭하는이름  
            title:                             최근 사용한 앱 리스트 볼때 나오는 이름 
            theme: ThemeData(primaryColor: Colors.x) //  앱바의 태마를 선택한다
            home : MyHomePage(임의의 widget 입력 Scaffold 도가능)
                    =>Scaffold
                        appbar: AppBar              // title  Text widget  사용  그냥 앱바에나오는이름
                                    title:Text 
                        body:  Center
                                    L Column
                                    L widget

    custom widget 만들땐 stl 인지 stf 인지 고심해야함 



return MaterialApp(
    debugShowCheckedModeBanner: false  // 디버그 표시를 지워준다  최상위 에서 선택
)


Scaffold(
    backgroundColor:Colors.amber[숫자];  // 전체의 호박색 백그라운드 다
                                            위치는 안에만 있으면 된다 AppBar 에서 설정 하지않는이상 
    
    
     drawer: Drawer(                                      //앱바의 햄버거 매뉴를 자동으로 생기고 누르면 나오는 자신의 상태창
                                                          //ctrl click Scaffold 속성
                                                           //drawer value 값은 위젯 이와야함
             child: ListView(                               //복수의 widget 이 나열할수있음 각각 ListTile 을 가지고있음
                        padding: EdgeInsets.zero,           // 여백을 없에버림
                            children: <Widget>[             //ListView 는 child 아 아닌 children 이온다
                                 UserAccountsDrawerHeader(   // 유저개정 정보가 보여야함
                                    currentAccountPicture: CircleAvatar(
                                        backgroundImage: AssetImage('assets/cat.png'),
                                        ),
                                    countName: Text('KKang'),             //@reqire 반드시써야함
                                    accountEmail: Text('kang@bb.com'),    //@reqire 반드시나와야함
                                    onDetailsPressed: () {                //기능을 수행한fuchtion 형태 와야함  
                           
                                     print('arrow is clicked');
                                     },
                                 otherAccountsPictures: <Widget>[       //복수 우측 끝에 위치한다
                                    CircleAvatar(
                                    backgroundImage: AssetImage('assets/bear.jpg'),
                                    backgroundColor: Colors.white,
                                    ),
                        decoration: BoxDecoration(                  
                                    color: Colors.red[200],
                                    borderRadius: BorderRadius.only(
                                        bottomLeft: Radius.circular(40.0),  //곡선율 40 설정
                                        bottomRight: Radius.circular(40.0),
                        ListTile(
                                leading: Icon(   // 왼쪽끝에 아이콘을 삽입
                                    Icons.home,
                                    color: Colors.grey[850],
                                    ),
                                title: Text('Home'),
                                onTap: () {                        // 길게누르기 두번 누르기 액션을 감지할수있음
                                    print('home is clicked');      // 스플레시 효과도 나옴
                                    },
                                trailing: Icon(Icons.add),     //오른쪽끝에 아이콘을 삽입 
                                     ),
        appBar:
        body: Builder(                         //스넥바 를 사용하기위해선 Scaffold.of(context)
                                               //하위트리 Builder 만든다 
            builder:(BuildContext ctx){        // Builder 에서 리턴된 값인 ctx  
                return Center(
                    child: FlatButton(
                        child:Text(
                            'show me',
                            style: TextStyle(            //버튼 스타일은 따로잡는다
                                color:Colors.white.
                            ),
                        ),
                    color:Colors.red,
                    onPressed:(){
                        Scaffold.of(ctx).showSnackBar(SnackBar(  //Scaffold 의 context 값 ctx 입력
                            content: Text('hello'),
                        ));
            
            body: MySnackBar(),             // 가독성으로 MySnackBar 함수만듬

        class MySnackBar extends StatelessWidget {
                @override
                Widget build(BuildContext context) {
                    return Center(
                    child: RaisedButton(
                        child: Text('show me'),
                        onPressed: () {
                            Scaffold.of(context).showSnackBar(
                            SnackBar(
                                content: Text(
                                'hellow',
                                textAlign: TextAlign.center,   //글자 정렬
                                style: TextStyle(color: Colors.white),
                                ),
                                backgroundColor: Colors.teal,
                                duration: Duration(milliseconds: 1000), //지연시간 1000 1초 


import 'package:fluttertoast/fluttertoast.dart';  // 토스트 메시지 를 쓰기위해 콜


            body: Center(
                    child: FlatButton(
                    onPressed: () {
                      flutterToast();            //토스트 함수 호출 
                    child: Text('toast'),
                    color: Colors.blue,
             
            void flutterToast() {
                Fluttertoast.showToast(               //enum 값 
                msg: 'flutter',                      // 호출 메시지
                gravity: ToastGravity.BOTTOM,       // 호출 위치
                backgroundColor: Colors.redAccent,    //배경색
                fontSize: 20.0,
                textColor: Colors.white, 
                toastLength: Toast.LENGTH_SHORT);       //토스트 유지시간
           



            Scaffold(                             //Container 사용        
                backgroundColor: Colors.blue,
                body: SafeArea(       //컨테이너 가 화면 에 보이지않기때문에 safearea 이용 alt+ 엔터 사용
                    child: Container(   //child 가없을 경우 컨테이너는 최대한 공간에 포지션
                    child: Text('hello'),   // child 가지면 텍스트 크기로 변한다
                                            // Container 는 하나의 컨테이너를 같는다
                    color: Colors.red,
                    width: 100,
                    height: 100,
                    margin:EdgeInsets.symmetric(  // 마진값 수치를 임의적으로 변경할수 있다
                        vertical: 50,           //세로
                        horizontal: 10          //가로
                    ),
                        padding: EdgeInsets.all(20), // 상하좌우 수치값  andauto 에서 inspetor 에서 볼수있음 
                    ),


  Colum 심화                                             
        Scaffold(
                backgroundColor: Colors.teal,
                body: SafeArea(
                    //child: Center(// 센터위젯 세로통제권 없음
                    child: Column(
                        //mainAxisAlignment: MainAxisAlignment.center,//세로는 무한확장 가로는 크기가 제한됨
                        // mainAxisSize:MainAxisSize.min, //  센터위젯이 세로 통제권얻음
                        //verticalDirection: VerticalDirection.up, // 아래에서부터 컨테이너가 올라감
                        //verticalDirection: VerticalDirection.down, //위에서 아래로 내려감 defult 값같음
                        //mainAxisAlignment: MainAxisAlignment.spaceEvenly, // 컬럼숫자 사이를 같은간격으로 나누어짐 1번 컨네이너 위는 공백이생김
                        //mainAxisAlignment: MainAxisAlignment.spaceBetween, // 1번과 n 번 컬럼이 각자 구석을 차지 하며 너누어짐
                        //crossAxisAlignment: CrossAxisAlignment.end, // 가로축 끝 기준으로 정렬하라
                        //crossAxisAlignment: CrossAxisAlignment.start, // 가로축 끝 시작 기준으로 정렬 하라
                        //crossAxisAlignment: CrossAxisAlignment.stretch, // 가로축끝까지 영역을 넓여줌

                        children: <Widget>[
                        Container(
                            width: 100,
                            height: 100,
                            color: Colors.white,
                            child: Text('container 1'),
                        ),
                        Container(
                            width: 100,
                            height: 100,
                            color: Colors.blue,
                            child: Text('container 2'),
                        ),
                        Container(
                            width: 100,
                            height: 100,
                            color: Colors.red,
                            child: Text('container 3'),
                        ),
                        // Container(                 // 컨테이너는 세로 통제권이 없음 컨테이너 크기가 바로 세로 끝임
                        //                           // 화면 오른쪽 끝 기준으로 정령 할려면 새로운컨테이너 인비져블 컨테이너
                        //                           // 가필요함
                        //   width: double.infinity,
                        //   height: 20,
                        // )





appBar: AppBar(
        title: Text('BBANTO'),
        centerTitle: true,                  // 엡바 에서 텍스트 값을 센터로 놓고싶을때 boolren 
        backgroundColor: Colors.redAccent   // 엡바 백그라운드 칼러 설정 
        elevation: 0.0,                     //appbar 높이 설정
        
        leading: IconButton(               //leading AppBar IconButton( 왼쪽정렬 
            icon: Icon(Icons.menu),          // icon : Icon(Icons 햄버거 아이콘 선택
                onPressed: () {                  // 버튼에 사용  함수의 형태로 버튼을 눌렀을대 함수내용실행
                    print('menu cliced');
          },

        actions: <Widget>[                //actions Appbar 오른쪽정렬 1가지이상 추가할수록 처음은 밀린다
            IconButton(
                icon: Icon(Icons.shopping_cart),
            IconButton(
                icon: Icon(Icons.search),
            },
          ),

        body: Padding(
            
             padding:EdgeInsets.fromLTRB(left,top,right,bottom), //inset 뭔가를 삽입하다
            
            child: Column(                 
               
                crossAxisAlignment : CrossAxisAlignment.start, // 컬럼을 가로 왼쪽에서 시작한다
                mainAxisAlignment : MainAxisAlignment.center  //컬럼을 세로 가운데는 축을 정렬 뜻한다 
                     
                    children:<widget>[                     // column 은 child  오고 children Text 로 온다
                         
                         Center(
                             child: CircleAvatar(          //이미지 동그라미안에 넣은다
                             backgroundImage:AssetImage('assets/name') // assets 폴더를 만든후 이미지저장 
                                                                //pubspec.yaml 에 assets 가서 이미지 경로를 지정한다
                             radius: 동그라미 크기 
                             backgroundColor:Colors.x     //투명이미지 배경설정
                             )
                         ),

                         Divider(        // 가로 줄을 그어넣은다
                             height:     //위아래 포함이다
                             thickness:  //선의 두깨
                             endIndent   // 선이 끝나는 지점을 정한다
                         )


                         Text('String',                     //text 처음 파라미터는 스트링 문자열입력
                            letterSpacing:                  // 글자간격 소수점 1자리까지 찍어줌        

                         )
                     ]
                SizeBox(                                   //column 안에 세로 글간격을 조절한다
                    height:                                 //세로 cols
                    width:                                  //가로 rows
                )

                Row(
                    children:<Widget>[
                        Icon(Icons.check_circle_outline), // flutter 에서 제공하는 체크박스 이미지를 가저온다 
                                                            // 왼쪽에 미리보기 제공함

                    ]
                )
                                                               
            ) 
        
        body:Center(                 //center widget 이있다고해서 화면정중앙 배치되는거아님
            child: Column(             Column 위젯가 만나게 되면 왜냐면 column 은세로축 재약이 없기 때문이다
               mainAxisAlignment:MainAxisAlignment.center 
            )
        )
        )

//flutter 에서 route 는 하나의 page 이다
// navigator 는 route 를 stack data구조로 관리한다
// stack data구조는 쌓아올리는데 추가할땐 push method 제거할댄 Pop method
// 모든 route 는 MaterialApp 위젯 아레에 child 로 있어야한다

            class MyApp extends StatelessWidget {
            @override
            Widget build(BuildContext context) {
                return MaterialApp(
                home: FristPage(),                  // route 는 materialApp 아래에 위치해야한다
            
            class FristPage extends StatelessWidget {
            @override
            Widget build(BuildContext context2) {    
                return Scaffold(
                appBar: AppBar(
                    title: Text('frist page'),
                    centerTitle: true,
                    backgroundColor: Colors.blue,
                    
                body: Center(
                    child: RaisedButton(
                        child: Text('Go to the Second Page'),
                            onPressed: (){                                     //onPressed 뒤에는 함수가 와야함
                            Navigator.push(context2,                            //context 가 가지고있는 widget tree 위치정보 를 가지고 현제 route 를 확인하고 push 함수가 원하는 route 를 쌓아올려줘야한다  
                            MaterialPageRoute(builder:(context2)=>SecondPage()   //네비게이터는 push 와 pop 으로 stack 으로 정리하는데
                                                                                //빌더 를 통해서 현제위치를 받아 원하는 route 로이동한다
                                                                                //SecondPage 는 FristPage 위로 올라가는거다

            class SecondPage extends StatelessWidget {
            @override
            Widget build(BuildContext ctx) {
                return Scaffold(
                appBar: AppBar(

                    title: Text('Second page'),
                    centerTitle: true,
                    backgroundColor: Colors.red,
                    elevation: 0.0,
                ),
                body: Center(
                    child: RaisedButton(
                    child: Text('Go to the Frist Page'),
                    onPressed: (){
                        Navigator.pop(ctx);              // 네비게이터 pop 은 단지 제거만 해준다 그러면  아래route 가 나오기때문이다



multipage  Navigator

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(          //routes 이동할 페이지 이름생성 map 자료형
      initialRoute: '/',      //multi page 시 선택 home 이랑 같이사용하지 않음
      routes: {              // flutter start page 는 보통 / 로지정함
         '/': (context) => ScreenA(), 
        '/b': (context) => ScreenB(),
        '/c': (context) => ScreenC(),

class ScreenA extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ScreenA'),
        centerTitle: true,
      ),
      body: Center(

        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,  //center 와 column 이 같이올때 반드시써야함
          children:<Widget> [
            RaisedButton(
              color: Colors.red,
                onPressed:(){
                Navigator.pushNamed(context, '/b');
                },
                child: Text('go to ScreenB')
            ),
            RaisedButton(
                color: Colors.red,
                onPressed:(){
                Navigator.pushNamed(context, '/c');
                },
                child: Text('go to ScreenC')



List<String> number=new List(); //growable  <dynamic> 이것이 generic 
var number2=new List(5);  //fixed-length
            number.add(5);
            number.add('kk');
            number.add(4.2);
            number.add(addNumber(3,4));
            number.add(true);
            print(number); // 함수 나 블리언 까지 리스트 들어간다
            int addNumber(num1 , num2)=>num1+num2;

void main() {
        var number =List(); 
        number.add(5);
        printNumber(number); //number 는 dynamic 타입 리스트라 오류

void printNumber(List<int>a){ // int 타입 리스트 
print(a);

List<String> names=List();
names.addAll(['a','b','c']); //list 이기때문에 []써야함
print(names);





void main() {

        //   var ccS=new CircleSlot();
        
        //   Circle x = new Circle(); 
        //   ccS.insert(x); 
        
        //   ccS.insert(new Circle()); // 같다 ㅡ,.ㅡ
        
        
        //   var sqS=new SquareSlot();
        //   sqS.insert(new Circle());    

        // class SquareSlot{
        // insert(Square sq){
        // class CircleSlot{
        // insert(Circle cc){


Stataful 은 제너릭 기법을 이용한다

class Circle{}
class Square{}


var ccS=new Slot<Circle>();          //이것이 제너릭스 기법
  ccS.insert(new Circle());           // 다른 것이 추가되면 triangle 이라던가 
 var sqS=new Slot<Square>();
sqS.insert(new Square());            // 간결 하고 중복을 피하며 재사용성이 좋아야 좋은코드이다
                                        
class Slot<T>{                        //이것이 제너릭스 기법
insert(T shape){                        

   








